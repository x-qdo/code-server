HDO don't have a support for parralel terminal sessions at that moment.
We will limit VS Code functionality ta have only one terminal at the 
moment.

Index: code-server/lib/vscode/src/vs/workbench/contrib/terminal/browser/terminalService.ts
===================================================================
--- code-server.orig/lib/vscode/src/vs/workbench/contrib/terminal/browser/terminalService.ts
+++ code-server/lib/vscode/src/vs/workbench/contrib/terminal/browser/terminalService.ts
@@ -993,6 +993,10 @@ export class TerminalService implements 
 		if (parent) {
 			return this._splitTerminal(shellLaunchConfig, location, parent);
 		}
+		this.instances.forEach((terminalInstance, i) => {
+			terminalInstance.dispose();
+		});
+
 		return this._createTerminal(shellLaunchConfig, location, options);
 	}
 
@@ -1069,11 +1073,11 @@ export class TerminalService implements 
 	}
 
 	private _getSplitParent(location?: ITerminalLocationOptions): ITerminalInstance | undefined {
-		if (location && typeof location === 'object' && 'parentTerminal' in location) {
-			return location.parentTerminal;
-		} else if (location && typeof location === 'object' && 'splitActiveTerminal' in location) {
-			return this.activeInstance;
-		}
+		// if (location && typeof location === 'object' && 'parentTerminal' in location) {
+		// 	return location.parentTerminal;
+		// } else if (location && typeof location === 'object' && 'splitActiveTerminal' in location) {
+		// 	return this.activeInstance;
+		// }
 		return undefined;
 	}
 
Index: code-server/lib/vscode/src/vs/workbench/contrib/terminal/browser/terminalMenus.ts
===================================================================
--- code-server.orig/lib/vscode/src/vs/workbench/contrib/terminal/browser/terminalMenus.ts
+++ code-server/lib/vscode/src/vs/workbench/contrib/terminal/browser/terminalMenus.ts
@@ -3,11 +3,11 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
-import { IAction, Action, SubmenuAction, Separator } from 'vs/base/common/actions';
+import { IAction, Action } from 'vs/base/common/actions';
 import { Codicon } from 'vs/base/common/codicons';
 import { Schemas } from 'vs/base/common/network';
 import { localize } from 'vs/nls';
-import { MenuRegistry, MenuId, IMenuActionOptions, MenuItemAction, IMenu } from 'vs/platform/actions/common/actions';
+import { MenuRegistry, MenuId, MenuItemAction, IMenu } from 'vs/platform/actions/common/actions';
 import { ICommandService } from 'vs/platform/commands/common/commands';
 import { ContextKeyExpr, IContextKeyService } from 'vs/platform/contextkey/common/contextkey';
 import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
@@ -17,7 +17,6 @@ import { ICreateTerminalOptions, ITermin
 import { TerminalCommandId, TERMINAL_VIEW_ID } from 'vs/workbench/contrib/terminal/common/terminal';
 import { TerminalContextKeys, TerminalContextKeyStrings } from 'vs/workbench/contrib/terminal/common/terminalContextKey';
 import { terminalStrings } from 'vs/workbench/contrib/terminal/common/terminalStrings';
-import { ACTIVE_GROUP, SIDE_GROUP } from 'vs/workbench/services/editor/common/editorService';
 
 const enum ContextMenuGroup {
 	Create = '1_create',
@@ -57,19 +56,6 @@ export function setupTerminalMenus(): vo
 			{
 				id: MenuId.MenubarTerminalMenu,
 				item: {
-					group: TerminalMenuBarGroup.Create,
-					command: {
-						id: TerminalCommandId.Split,
-						title: localize({ key: 'miSplitTerminal', comment: ['&& denotes a mnemonic'] }, "&&Split Terminal"),
-						precondition: ContextKeyExpr.has(TerminalContextKeyStrings.IsOpen)
-					},
-					order: 2,
-					when: TerminalContextKeys.processSupported
-				}
-			},
-			{
-				id: MenuId.MenubarTerminalMenu,
-				item: {
 					group: TerminalMenuBarGroup.Run,
 					command: {
 						id: TerminalCommandId.RunActiveFile,
@@ -96,16 +82,16 @@ export function setupTerminalMenus(): vo
 
 	MenuRegistry.appendMenuItems(
 		[
-			{
-				id: MenuId.TerminalInstanceContext,
-				item: {
-					group: ContextMenuGroup.Create,
-					command: {
-						id: TerminalCommandId.Split,
-						title: terminalStrings.split.value
-					}
-				}
-			},
+			// {
+			// 	id: MenuId.TerminalInstanceContext,
+			// 	item: {
+			// 		group: ContextMenuGroup.Create,
+			// 		command: {
+			// 			id: TerminalCommandId.Split,
+			// 			title: terminalStrings.split.value
+			// 		}
+			// 	}
+			// },
 			{
 				id: MenuId.TerminalInstanceContext,
 				item: {
@@ -207,16 +193,16 @@ export function setupTerminalMenus(): vo
 
 	MenuRegistry.appendMenuItems(
 		[
-			{
-				id: MenuId.TerminalEditorInstanceContext,
-				item: {
-					group: ContextMenuGroup.Create,
-					command: {
-						id: TerminalCommandId.Split,
-						title: terminalStrings.split.value
-					}
-				}
-			},
+			// {
+			// 	id: MenuId.TerminalEditorInstanceContext,
+			// 	item: {
+			// 		group: ContextMenuGroup.Create,
+			// 		command: {
+			// 			id: TerminalCommandId.Split,
+			// 			title: terminalStrings.split.value
+			// 		}
+			// 	}
+			// },
 			{
 				id: MenuId.TerminalEditorInstanceContext,
 				item: {
@@ -473,21 +459,21 @@ export function setupTerminalMenus(): vo
 					)
 				}
 			},
-			{
-				id: MenuId.ViewTitle,
-				item: {
-					command: {
-						id: TerminalCommandId.CreateWithProfileButton,
-						title: TerminalCommandId.CreateWithProfileButton
-					},
-					group: 'navigation',
-					order: 0,
-					when: ContextKeyExpr.and(
-						ContextKeyExpr.equals('view', TERMINAL_VIEW_ID),
-						ContextKeyExpr.or(TerminalContextKeys.webExtensionContributedProfile, TerminalContextKeys.processSupported)
-					)
-				}
-			}
+			// {
+			// 	id: MenuId.ViewTitle,
+			// 	item: {
+			// 		command: {
+			// 			id: TerminalCommandId.CreateWithProfileButton,
+			// 			title: TerminalCommandId.CreateWithProfileButton
+			// 		},
+			// 		group: 'navigation',
+			// 		order: 0,
+			// 		when: ContextKeyExpr.and(
+			// 			ContextKeyExpr.equals('view', TERMINAL_VIEW_ID),
+			// 			ContextKeyExpr.or(TerminalContextKeys.webExtensionContributedProfile, TerminalContextKeys.processSupported)
+			// 		)
+			// 	}
+			// }
 		]
 	);
 
@@ -711,15 +697,15 @@ export function setupTerminalMenus(): vo
 		group: '3_files'
 	});
 
-	MenuRegistry.appendMenuItem(MenuId.EditorTitle, {
-		command: {
-			id: TerminalCommandId.CreateWithProfileButton,
-			title: TerminalCommandId.CreateWithProfileButton
-		},
-		group: 'navigation',
-		order: 0,
-		when: ResourceContextKey.Scheme.isEqualTo(Schemas.vscodeTerminal)
-	});
+	// MenuRegistry.appendMenuItem(MenuId.EditorTitle, {
+	// 	command: {
+	// 		id: TerminalCommandId.CreateWithProfileButton,
+	// 		title: TerminalCommandId.CreateWithProfileButton
+	// 	},
+	// 	group: 'navigation',
+	// 	order: 0,
+	// 	when: ResourceContextKey.Scheme.isEqualTo(Schemas.vscodeTerminal)
+	// });
 }
 
 export function getTerminalActionBarArgs(location: ITerminalLocationOptions, profiles: ITerminalProfile[], defaultProfileName: string, contributedProfiles: readonly IExtensionTerminalProfile[], instantiationService: IInstantiationService, terminalService: ITerminalService, contextKeyService: IContextKeyService, commandService: ICommandService, dropdownMenu: IMenu): {
@@ -732,72 +718,72 @@ export function getTerminalActionBarArgs
 	let dropdownActions: IAction[] = [];
 	let submenuActions: IAction[] = [];
 	profiles = profiles.filter(e => !e.isAutoDetected);
-	const splitLocation = (location === TerminalLocation.Editor || (typeof location === 'object' && 'viewColumn' in location && location.viewColumn === ACTIVE_GROUP)) ? { viewColumn: SIDE_GROUP } : { splitActiveTerminal: true };
-	for (const p of profiles) {
-		const isDefault = p.profileName === defaultProfileName;
-		const options: IMenuActionOptions = {
-			arg: {
-				config: p,
-				location
-			} as ICreateTerminalOptions,
-			shouldForwardArgs: true
-		};
-		const splitOptions: IMenuActionOptions = {
-			arg: {
-				config: p,
-				splitLocation
-			} as ICreateTerminalOptions,
-			shouldForwardArgs: true
-		};
-		if (isDefault) {
-			dropdownActions.unshift(new MenuItemAction({ id: TerminalCommandId.NewWithProfile, title: localize('defaultTerminalProfile', "{0} (Default)", p.profileName), category: TerminalTabContextMenuGroup.Profile }, undefined, options, contextKeyService, commandService));
-			submenuActions.unshift(new MenuItemAction({ id: TerminalCommandId.Split, title: localize('defaultTerminalProfile', "{0} (Default)", p.profileName), category: TerminalTabContextMenuGroup.Profile }, undefined, splitOptions, contextKeyService, commandService));
-		} else {
-			dropdownActions.push(new MenuItemAction({ id: TerminalCommandId.NewWithProfile, title: p.profileName.replace(/[\n\r\t]/g, ''), category: TerminalTabContextMenuGroup.Profile }, undefined, options, contextKeyService, commandService));
-			submenuActions.push(new MenuItemAction({ id: TerminalCommandId.Split, title: p.profileName.replace(/[\n\r\t]/g, ''), category: TerminalTabContextMenuGroup.Profile }, undefined, splitOptions, contextKeyService, commandService));
-		}
-	}
-
-	for (const contributed of contributedProfiles) {
-		const isDefault = contributed.title === defaultProfileName;
-		const title = isDefault ? localize('defaultTerminalProfile', "{0} (Default)", contributed.title.replace(/[\n\r\t]/g, '')) : contributed.title.replace(/[\n\r\t]/g, '');
-		dropdownActions.push(new Action('contributed', title, undefined, true, () => terminalService.createTerminal({
-			config: {
-				extensionIdentifier: contributed.extensionIdentifier,
-				id: contributed.id,
-				title
-			},
-			location
-		})));
-		submenuActions.push(new Action('contributed-split', title, undefined, true, () => terminalService.createTerminal({
-			config: {
-				extensionIdentifier: contributed.extensionIdentifier,
-				id: contributed.id,
-				title
-			},
-			location: splitLocation
-		})));
-	}
-
-	const defaultProfileAction = dropdownActions.find(d => d.label.endsWith('(Default)'));
-	if (defaultProfileAction) {
-		dropdownActions = dropdownActions.filter(d => d !== defaultProfileAction).sort((a, b) => a.label.localeCompare(b.label));
-		dropdownActions.unshift(defaultProfileAction);
-	}
-
-	if (dropdownActions.length > 0) {
-		dropdownActions.push(new SubmenuAction('split.profile', localize('splitTerminal', 'Split Terminal'), submenuActions));
-		dropdownActions.push(new Separator());
-	}
-
-	for (const [, configureActions] of dropdownMenu.getActions()) {
-		for (const action of configureActions) {
-			// make sure the action is a MenuItemAction
-			if ('alt' in action) {
-				dropdownActions.push(action);
-			}
-		}
-	}
+	// const splitLocation = (location === TerminalLocation.Editor || (typeof location === 'object' && 'viewColumn' in location && location.viewColumn === ACTIVE_GROUP)) ? { viewColumn: SIDE_GROUP } : { splitActiveTerminal: true };
+	// for (const p of profiles) {
+	// 	const isDefault = p.profileName === defaultProfileName;
+	// 	const options: IMenuActionOptions = {
+	// 		arg: {
+	// 			config: p,
+	// 			location
+	// 		} as ICreateTerminalOptions,
+	// 		shouldForwardArgs: true
+	// 	};
+	// 	const splitOptions: IMenuActionOptions = {
+	// 		arg: {
+	// 			config: p,
+	// 			splitLocation
+	// 		} as ICreateTerminalOptions,
+	// 		shouldForwardArgs: true
+	// 	};
+	// 	if (isDefault) {
+	// 		dropdownActions.unshift(new MenuItemAction({ id: TerminalCommandId.NewWithProfile, title: localize('defaultTerminalProfile', "{0} (Default)", p.profileName), category: TerminalTabContextMenuGroup.Profile }, undefined, options, contextKeyService, commandService));
+	// 		submenuActions.unshift(new MenuItemAction({ id: TerminalCommandId.Split, title: localize('defaultTerminalProfile', "{0} (Default)", p.profileName), category: TerminalTabContextMenuGroup.Profile }, undefined, splitOptions, contextKeyService, commandService));
+	// 	} else {
+	// 		dropdownActions.push(new MenuItemAction({ id: TerminalCommandId.NewWithProfile, title: p.profileName.replace(/[\n\r\t]/g, ''), category: TerminalTabContextMenuGroup.Profile }, undefined, options, contextKeyService, commandService));
+	// 		submenuActions.push(new MenuItemAction({ id: TerminalCommandId.Split, title: p.profileName.replace(/[\n\r\t]/g, ''), category: TerminalTabContextMenuGroup.Profile }, undefined, splitOptions, contextKeyService, commandService));
+	// 	}
+	// }
+
+	// for (const contributed of contributedProfiles) {
+	// 	const isDefault = contributed.title === defaultProfileName;
+	// 	const title = isDefault ? localize('defaultTerminalProfile', "{0} (Default)", contributed.title.replace(/[\n\r\t]/g, '')) : contributed.title.replace(/[\n\r\t]/g, '');
+	// 	dropdownActions.push(new Action('contributed', title, undefined, true, () => terminalService.createTerminal({
+	// 		config: {
+	// 			extensionIdentifier: contributed.extensionIdentifier,
+	// 			id: contributed.id,
+	// 			title
+	// 		},
+	// 		location
+	// 	})));
+	// 	submenuActions.push(new Action('contributed-split', title, undefined, true, () => terminalService.createTerminal({
+	// 		config: {
+	// 			extensionIdentifier: contributed.extensionIdentifier,
+	// 			id: contributed.id,
+	// 			title
+	// 		},
+	// 		location: splitLocation
+	// 	})));
+	// }
+
+	// const defaultProfileAction = dropdownActions.find(d => d.label.endsWith('(Default)'));
+	// if (defaultProfileAction) {
+	// 	dropdownActions = dropdownActions.filter(d => d !== defaultProfileAction).sort((a, b) => a.label.localeCompare(b.label));
+	// 	dropdownActions.unshift(defaultProfileAction);
+	// }
+	//
+	// if (dropdownActions.length > 0 && false) {
+	// 	dropdownActions.push(new SubmenuAction('split.profile', localize('splitTerminal', 'Split Terminal'), submenuActions));
+	// 	dropdownActions.push(new Separator());
+	// }
+
+	// for (const [, configureActions] of dropdownMenu.getActions()) {
+	// 	for (const action of configureActions) {
+	// 		// make sure the action is a MenuItemAction
+	// 		if ('alt' in action) {
+	// 			dropdownActions.push(action);
+	// 		}
+	// 	}
+	// }
 
 	const defaultSubmenuProfileAction = submenuActions.find(d => d.label.endsWith('(Default)'));
 	if (defaultSubmenuProfileAction) {
Index: code-server/lib/vscode/src/vs/workbench/contrib/terminal/browser/terminalView.ts
===================================================================
--- code-server.orig/lib/vscode/src/vs/workbench/contrib/terminal/browser/terminalView.ts
+++ code-server/lib/vscode/src/vs/workbench/contrib/terminal/browser/terminalView.ts
@@ -24,7 +24,7 @@ import { PANEL_BACKGROUND, SIDE_BAR_BACK
 import { IMenu, IMenuService, MenuId, MenuItemAction } from 'vs/platform/actions/common/actions';
 import { ITerminalProfileResolverService, ITerminalProfileService, TerminalCommandId } from 'vs/workbench/contrib/terminal/common/terminal';
 import { TerminalSettingId, ITerminalProfile, TerminalLocation } from 'vs/platform/terminal/common/terminal';
-import { ActionViewItem, SelectActionViewItem } from 'vs/base/browser/ui/actionbar/actionViewItems';
+import { SelectActionViewItem } from 'vs/base/browser/ui/actionbar/actionViewItems';
 import { attachSelectBoxStyler, attachStylerCallback } from 'vs/platform/theme/common/styler';
 import { selectBorder } from 'vs/platform/theme/common/colorRegistry';
 import { ISelectOptionItem } from 'vs/base/browser/ui/selectBox/selectBox';
@@ -41,7 +41,6 @@ import { URI } from 'vs/base/common/uri'
 import { ColorScheme } from 'vs/platform/theme/common/theme';
 import { getColorClass, getUriClasses } from 'vs/workbench/contrib/terminal/browser/terminalIcon';
 import { terminalStrings } from 'vs/workbench/contrib/terminal/common/terminalStrings';
-import { withNullAsUndefined } from 'vs/base/common/types';
 import { getTerminalActionBarArgs } from 'vs/workbench/contrib/terminal/browser/terminalMenus';
 import { TerminalContextKeys } from 'vs/workbench/contrib/terminal/common/terminalContextKey';
 import { getShellIntegrationTooltip } from 'vs/workbench/contrib/terminal/browser/terminalTooltip';
@@ -65,21 +64,18 @@ export class TerminalViewPane extends Vi
 		@IContextKeyService private readonly _contextKeyService: IContextKeyService,
 		@IViewDescriptorService viewDescriptorService: IViewDescriptorService,
 		@IConfigurationService configurationService: IConfigurationService,
-		@IContextMenuService private readonly _contextMenuService: IContextMenuService,
+		@IContextMenuService _contextMenuService: IContextMenuService,
 		@IInstantiationService private readonly _instantiationService: IInstantiationService,
 		@ITerminalService private readonly _terminalService: ITerminalService,
 		@ITerminalGroupService private readonly _terminalGroupService: ITerminalGroupService,
 		@IThemeService themeService: IThemeService,
 		@ITelemetryService telemetryService: ITelemetryService,
 		@INotificationService private readonly _notificationService: INotificationService,
-		@IKeybindingService private readonly _keybindingService: IKeybindingService,
 		@IOpenerService openerService: IOpenerService,
 		@IMenuService private readonly _menuService: IMenuService,
 		@ICommandService private readonly _commandService: ICommandService,
 		@ITerminalProfileService private readonly _terminalProfileService: ITerminalProfileService,
-		@ITerminalProfileResolverService private readonly _terminalProfileResolverService: ITerminalProfileResolverService,
-		@IThemeService private readonly _themeService: IThemeService
-	) {
+		@ITerminalProfileResolverService private readonly _terminalProfileResolverService: ITerminalProfileResolverService	) {
 		super(options, keybindingService, _contextMenuService, configurationService, _contextKeyService, viewDescriptorService, _instantiationService, openerService, themeService, telemetryService);
 		this._register(this._terminalService.onDidRegisterProcessSupport(() => {
 			if (this._actions) {
@@ -196,27 +192,27 @@ export class TerminalViewPane extends Vi
 
 	override getActionViewItem(action: Action): IActionViewItem | undefined {
 		switch (action.id) {
-			case TerminalCommandId.Split: {
-				// Split needs to be special cased to force splitting within the panel, not the editor
-				const panelOnlySplitAction: IAction = {
-					id: action.id,
-					checked: action.checked,
-					class: action.class,
-					enabled: action.enabled,
-					label: action.label,
-					dispose: action.dispose.bind(action),
-					tooltip: action.tooltip,
-					run: async () => {
-						const instance = this._terminalGroupService.activeInstance;
-						if (instance) {
-							const newInstance = await this._terminalService.createTerminal({ location: { parentTerminal: instance } });
-							return newInstance?.focusWhenReady();
-						}
-						return;
-					}
-				};
-				return new ActionViewItem(action, panelOnlySplitAction, { icon: true, label: false, keybinding: this._getKeybindingLabel(action) });
-			}
+			// case TerminalCommandId.Split: {
+			// 	// Split needs to be special cased to force splitting within the panel, not the editor
+			// 	const panelOnlySplitAction: IAction = {
+			// 		id: action.id,
+			// 		checked: action.checked,
+			// 		class: action.class,
+			// 		enabled: action.enabled,
+			// 		label: action.label,
+			// 		dispose: action.dispose.bind(action),
+			// 		tooltip: action.tooltip,
+			// 		run: async () => {
+			// 			const instance = this._terminalGroupService.activeInstance;
+			// 			if (instance) {
+			// 				const newInstance = await this._terminalService.createTerminal({ location: { parentTerminal: instance } });
+			// 				return newInstance?.focusWhenReady();
+			// 			}
+			// 			return;
+			// 		}
+			// 	};
+			// 	return new ActionViewItem(action, panelOnlySplitAction, { icon: true, label: false, keybinding: this._getKeybindingLabel(action) });
+			// }
 			case TerminalCommandId.SwitchTerminal: {
 				return this._instantiationService.createInstance(SwitchTerminalActionViewItem, action);
 			}
@@ -225,16 +221,16 @@ export class TerminalViewPane extends Vi
 				createAndFillInContextMenuActions(this._singleTabMenu, undefined, actions);
 				return this._instantiationService.createInstance(SingleTerminalTabActionViewItem, action, actions);
 			}
-			case TerminalCommandId.CreateWithProfileButton: {
-				if (this._tabButtons) {
-					this._tabButtons.dispose();
-				}
-
-				const actions = getTerminalActionBarArgs(TerminalLocation.Panel, this._terminalProfileService.availableProfiles, this._getDefaultProfileName(), this._terminalProfileService.contributedProfiles, this._instantiationService, this._terminalService, this._contextKeyService, this._commandService, this._dropdownMenu);
-				this._tabButtons = new DropdownWithPrimaryActionViewItem(actions.primaryAction, actions.dropdownAction, actions.dropdownMenuActions, actions.className, this._contextMenuService, {}, this._keybindingService, this._notificationService, this._contextKeyService, this._themeService);
-				this._updateTabActionBar(this._terminalProfileService.availableProfiles);
-				return this._tabButtons;
-			}
+			// case TerminalCommandId.CreateWithProfileButton: {
+			// 	if (this._tabButtons) {
+			// 		this._tabButtons.dispose();
+			// 	}
+			//
+			// 	const actions = getTerminalActionBarArgs(TerminalLocation.Panel, this._terminalProfileService.availableProfiles, this._getDefaultProfileName(), this._terminalProfileService.contributedProfiles, this._instantiationService, this._terminalService, this._contextKeyService, this._commandService, this._dropdownMenu);
+			// 	this._tabButtons = new DropdownWithPrimaryActionViewItem(actions.primaryAction, actions.dropdownAction, actions.dropdownMenuActions, actions.className, this._contextMenuService, {}, this._keybindingService, this._notificationService, this._contextKeyService, this._themeService);
+			// 	this._updateTabActionBar(this._terminalProfileService.availableProfiles);
+			// 	return this._tabButtons;
+			// }
 		}
 		return super.getActionViewItem(action);
 	}
@@ -248,11 +244,6 @@ export class TerminalViewPane extends Vi
 		}
 		return defaultProfileName!;
 	}
-
-	private _getKeybindingLabel(action: IAction): string | undefined {
-		return withNullAsUndefined(this._keybindingService.lookupKeybinding(action.id)?.getLabel());
-	}
-
 	private _updateTabActionBar(profiles: ITerminalProfile[]): void {
 		const actions = getTerminalActionBarArgs(TerminalLocation.Panel, profiles, this._getDefaultProfileName(), this._terminalProfileService.contributedProfiles, this._instantiationService, this._terminalService, this._contextKeyService, this._commandService, this._dropdownMenu);
 		this._tabButtons?.update(actions.dropdownAction, actions.dropdownMenuActions);
Index: code-server/lib/vscode/src/vs/workbench/contrib/terminal/browser/terminalEditor.ts
===================================================================
--- code-server.orig/lib/vscode/src/vs/workbench/contrib/terminal/browser/terminalEditor.ts
+++ code-server/lib/vscode/src/vs/workbench/contrib/terminal/browser/terminalEditor.ts
@@ -8,7 +8,6 @@ import { IActionViewItem } from 'vs/base
 import { IAction } from 'vs/base/common/actions';
 import { CancellationToken } from 'vs/base/common/cancellation';
 import { FindReplaceState } from 'vs/editor/contrib/find/browser/findState';
-import { DropdownWithPrimaryActionViewItem } from 'vs/platform/actions/browser/dropdownWithPrimaryActionViewItem';
 import { IMenu, IMenuService, MenuId } from 'vs/platform/actions/common/actions';
 import { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';
 import { IContextMenuService } from 'vs/platform/contextview/browser/contextView';
@@ -22,15 +21,11 @@ import { IEditorOpenContext } from 'vs/w
 import { ITerminalEditorService, ITerminalService, terminalEditorId } from 'vs/workbench/contrib/terminal/browser/terminal';
 import { TerminalEditorInput } from 'vs/workbench/contrib/terminal/browser/terminalEditorInput';
 import { TerminalFindWidget } from 'vs/workbench/contrib/terminal/browser/terminalFindWidget';
-import { getTerminalActionBarArgs } from 'vs/workbench/contrib/terminal/browser/terminalMenus';
-import { ITerminalProfileResolverService, ITerminalProfileService, TerminalCommandId } from 'vs/workbench/contrib/terminal/common/terminal';
 import { IEditorGroup } from 'vs/workbench/services/editor/common/editorGroupsService';
 import { isLinux, isMacintosh } from 'vs/base/common/platform';
 import { BrowserFeatures } from 'vs/base/browser/canIUse';
 import { INotificationService } from 'vs/platform/notification/common/notification';
 import { openContextMenu } from 'vs/workbench/contrib/terminal/browser/terminalContextMenu';
-import { ICommandService } from 'vs/platform/commands/common/commands';
-import { ACTIVE_GROUP } from 'vs/workbench/services/editor/common/editorService';
 
 const findWidgetSelector = '.simple-find-part-wrapper';
 
@@ -43,8 +38,6 @@ export class TerminalEditor extends Edit
 
 	private _lastDimension?: dom.Dimension;
 
-	private readonly _dropdownMenu: IMenu;
-
 	private _findWidget: TerminalFindWidget;
 	private _findState: FindReplaceState;
 
@@ -52,28 +45,25 @@ export class TerminalEditor extends Edit
 
 	private _cancelContextMenu: boolean = false;
 
-	get findState(): FindReplaceState { return this._findState; }
+	get findState(): FindReplaceState {
+		return this._findState;
+	}
 
+	// @ts-ignore
 	constructor(
 		@ITelemetryService telemetryService: ITelemetryService,
 		@IThemeService themeService: IThemeService,
 		@IStorageService storageService: IStorageService,
 		@ITerminalEditorService private readonly _terminalEditorService: ITerminalEditorService,
-		@ITerminalProfileResolverService private readonly _terminalProfileResolverService: ITerminalProfileResolverService,
 		@ITerminalService private readonly _terminalService: ITerminalService,
 		@IInstantiationService instantiationService: IInstantiationService,
-		@IContextKeyService private readonly _contextKeyService: IContextKeyService,
-		@ICommandService private readonly _commandService: ICommandService,
+		@IContextKeyService _contextKeyService: IContextKeyService,
 		@IMenuService menuService: IMenuService,
-		@IInstantiationService private readonly _instantiationService: IInstantiationService,
 		@IContextMenuService private readonly _contextMenuService: IContextMenuService,
-		@INotificationService private readonly _notificationService: INotificationService,
-		@ITerminalProfileService private readonly _terminalProfileService: ITerminalProfileService
-	) {
+		@INotificationService private readonly _notificationService: INotificationService	) {
 		super(terminalEditorId, telemetryService, themeService, storageService);
 		this._findState = new FindReplaceState();
 		this._findWidget = instantiationService.createInstance(TerminalFindWidget, this._findState);
-		this._dropdownMenu = this._register(menuService.createMenu(MenuId.TerminalNewDropdownContext, _contextKeyService));
 		this._instanceMenu = this._register(menuService.createMenu(MenuId.TerminalEditorInstanceContext, _contextKeyService));
 		this._register(this._terminalService.onDidRequestHideFindWidget(() => this.hideFindWidget()));
 	}
@@ -212,27 +202,16 @@ export class TerminalEditor extends Edit
 	}
 
 	override getActionViewItem(action: IAction): IActionViewItem | undefined {
-		switch (action.id) {
-			case TerminalCommandId.CreateWithProfileButton: {
-				const location = { viewColumn: ACTIVE_GROUP };
-				const actions = getTerminalActionBarArgs(location, this._terminalProfileService.availableProfiles, this._getDefaultProfileName(), this._terminalProfileService.contributedProfiles, this._instantiationService, this._terminalService, this._contextKeyService, this._commandService, this._dropdownMenu);
-				const button = this._instantiationService.createInstance(DropdownWithPrimaryActionViewItem, actions.primaryAction, actions.dropdownAction, actions.dropdownMenuActions, actions.className, this._contextMenuService, {});
-				return button;
-			}
-		}
+		// switch (action.id) {
+		// 	case TerminalCommandId.CreateWithProfileButton: {
+		// 		const location = { viewColumn: ACTIVE_GROUP };
+		// 		const actions = getTerminalActionBarArgs(location, this._terminalProfileService.availableProfiles, this._getDefaultProfileName(), this._terminalProfileService.contributedProfiles, this._instantiationService, this._terminalService, this._contextKeyService, this._commandService, this._dropdownMenu);
+		// 		const button = this._instantiationService.createInstance(DropdownWithPrimaryActionViewItem, actions.primaryAction, actions.dropdownAction, actions.dropdownMenuActions, actions.className, this._contextMenuService, {});
+		// 		return button;
+		// 	}
+		// }
 		return super.getActionViewItem(action);
 	}
-
-	private _getDefaultProfileName(): string {
-		let defaultProfileName;
-		try {
-			defaultProfileName = this._terminalProfileService.getDefaultProfileName();
-		} catch (e) {
-			defaultProfileName = this._terminalProfileResolverService.defaultProfileName;
-		}
-		return defaultProfileName!;
-	}
-
 	focusFindWidget() {
 		if (this._overflowGuardElement && !this._overflowGuardElement?.querySelector(findWidgetSelector)) {
 			this._overflowGuardElement.appendChild(this._findWidget.getDomNode());
